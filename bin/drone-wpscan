#!/usr/bin/env python2
# Copyright (c) 2013 Tom Steele, Dan Kottmann, FishNet Security
# See the file license.txt for copying permission

import os
import sys
import re
from HTMLParser import HTMLParser
import json

sys.path.append(os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..'))
)

from optparse import OptionParser
from urlparse import urlparse
import urllib
from lairdrone import api, drone_models as models
from lairdrone import helper
from distutils.version import LooseVersion

# TODO: Add functionality for looking at "main_theme" and "plugins", enumerating those that list vulnerabilities. See "WordPress Installation with Vulnerable Add-ons" in canned, and zibby "wpscan-qa-zibby-com.json" from their 2020 test.

# TODO: Combine this with wpscan-sum:
# - generate 1 vuln per supported area:
#   - vulnerable wp version (see ncld output)
#   - vulnerable plugins (see ncld output)
#   - enumerable user accounts (see ncld output)
#   - config backups (see ncld output)
#   - main theme vulns
#   - plugins with vulns
#   - timthumbs
#   - db_exports
#   -
#   - POSSIBLY OTHERS, check all the keys in the output. It is OK to add in warnings for things we don't yet handle yet because we don't know their shap.
# - The goal is to have separate vulnerabilities populate for each area above. Plus we also want a summary info finding like wp-sum, but there is no reason for thit to be separate now that we're generating multiple findings from the same script.


# Here is the wording used for manually entering some vulns:

# Vulnerable WordPress Plugins (CVE)
# The WordPress ecosystem can introduce buggy and vulnerable software through plugins that site maintainers may choose to install. Because plugins hook into the core WordPress code, they can introduce bugs that affect the entire site. This may include data leakage or even full site compromise.
# We identified the following vulnerable WordPress plugins:
# (Note, for versions that don't have the number detected, we'll want to note that we couldn't tell the exact version, but there are the following known vulnerabilities. ACTUALLY, i think it is best to list all of these without other info, as a courtesy. Say something like, "following are plugins that we detected were in use and that have known vulnerabilities, but for which we were enable to determine the version number:", and then just list them. There could be distinction in this group between those without a known "latest_version" and those with. Without a latest known version could mean that it haven't even been updated...?)
## Upgrade plugins that are still supported to the lastest secure version. Remove any plugins that are no longer supported or that have not yet patched the referenced issues.

# Accessible WordPress Configuration File Backups (8)
# WordPress has a special file named wp-config.php that stores sensitive configuration information for your website.
#
# By default, the wp-config.php file stores the following information:

# - MySQL settings
# - Secret keys
# - Database table prefix
# - ABSPATH

# Developers can also store other sensitive information in the file.

# The wp-config.php file can be manually backed up, or often times, the file can be automatically backed up by editing software without warning the developer when this is done. This could leave the file and its contents exposed to attackers.

# We identified the following backup file:
#  - https://newcloudnetworks.com/wp-config.bak

# If the exposed configuration file values match (or have ever matched) the values used for the live website, the information should be considered leaked and changed immediately. We recommend changing at a minimum the secret keys and database password. All backup files should be deleted and a review should be conducted to identify how backup files are being created and exposed and corrective actions taken.

# See Also: https://blog.wpscan.com/wordpress-configuration-file-backups/


OS_WEIGHT = 0
TOOL = "wpscan"


description_tpl = '''According to the version number we were able to identify through fingerprinting activities, the WordPress application running on the remote web server is affected by multiple vulnerabilities:

%s'''

evidence_tpl = '''```
Target URL:    %s
Version:       %s
Release Date:  %s
Confidence:    %s
Fixed Version: %s
```'''

def get_cves(cve_ids):
    url = "https://raw.githubusercontent.com/olbat/nvdcve/master/nvdcve/%s.json"

    cves = []
    for cve in cve_ids:
        print 'fetching %s' % cve
        response = urllib.urlopen(url % cve)
        data = json.loads(response.read())
        cves.append(data)

    return cves

def parse(project_id, wpscan_json_file, db, options):
    """Parses a WPScan file and updates the Lair database

    :param project: The project id
    :param wpscan_json_file: The WPScan json file to be parsed
    :param db: A database connection
    """

    file = open(wpscan_json_file)
    doc = json.load(file)

    # Create the project dictionary which acts as foundation of document
    project = dict(models.project_model)
    project['commands'] = list()
    project['vulnerabilities'] = list()
    project['project_id'] = project_id

    # Temp dicts used to ensure no duplicate hosts or ports are added
    temp_vulns = dict()
    temp_hosts = list()

    command = dict(models.command_model)
    command['tool'] = TOOL
    command['command'] = 'wpscan'
    project['commands'].append(command)

    if not doc['version']['vulnerabilities']:
        print 'no vulnerabilities'
        exit(0)

    fixed_vers = []
    cve_ids = []
    vulns = []
    for v in doc['version']['vulnerabilities']:
        if v.get('fixed_in'):
            fixed_vers.append(v['fixed_in'])

        vuln_cve_ids = []
        if v['references'].has_key('cve'):
            for cve in v['references']['cve']:
                cve_ids.append("CVE-%s" % cve)
                vuln_cve_ids.append("CVE-%s" % cve)

        urls = []
        if v['references']['url']:
            for url in v['references']['url']:
                urls.append(url)

        # assumes format: WordPress <= 4.9.6 - Authenticated Arbitrary File Deletion
        txt = v['title'] + '.'
        if vuln_cve_ids:
            txt += ' (%s)' % ', '.join(['[%s](https://nvd.nist.gov/vuln/detail/%s)' % (cve, cve) for cve in vuln_cve_ids ])
        if urls:
            txt += ' References: %s' % ', '.join(['[%s](%s)' % (urlparse(url).hostname, url) for url in urls])

        vulns.append(txt)


    sorted(fixed_vers, key=LooseVersion)
    less_ver = fixed_vers[0]
    fixed_ver = fixed_vers[-1]

    cvss = 0
    cves = get_cves(cve_ids)
    for cve in cves:
        if cve.get('impact') and cve['impact'].get('baseMetricV2') and cve['impact']['baseMetricV2'].get('cvssV2') and cve['impact']['baseMetricV2']['cvssV2'].get('baseScore'):
            base_score = cve['impact']['baseMetricV2']['cvssV2']['baseScore']
            if base_score > cvss:
                cvss = base_score

    v = dict(models.vulnerability_model)
    v['cves'] = list()
    v['plugin_ids'] = list()
    v['identified_by'] = list()
    v['hosts'] = list()
    v['notes'] = list()

    v['title'] = 'WordPress < %s Multiple Vulnerabilities' % less_ver
    v['cves'] = cve_ids
    v['cvss'] = cvss
    v['description'] = description_tpl % '\n'.join(['- %s' % vuln for vuln in vulns])
    v['evidence'] = evidence_tpl % (
        doc['target_url'],
        doc['version']['number'],
        doc['version']['release_date'],
        doc['version']['confidence'],
        fixed_ver,
    )
    v['solution'] = 'Update to the latest version of WordPress, or the referenced fixed version.'
    # v['tags'] = ['cat:network']

    # Set plugin
    plugin_id = 'wpscan-' + doc['version']['number']
    plugin = dict(models.plugin_id_model)
    plugin['tool'] = TOOL
    plugin['id'] = 'wpscan-' + doc['version']['number']
    v['plugin_ids'].append(plugin)

    # Set identified by information
    identified = dict(models.identified_by_model)
    identified['tool'] = TOOL
    identified['id'] = plugin_id
    v['identified_by'].append(identified)

    # Parse url to get port and hostname
    url = urlparse(doc['target_url'])
    port = 80
    if url.port:
        port = url.port
    elif url.scheme == 'https':
        port = 443

    # Associate host with vuln
    host_key_dict = dict(models.host_key_model)
    host_key_dict['string_addr'] = doc['target_ip']
    host_key_dict['port'] = port
    v['hosts'].append(host_key_dict)
    tag = 'dhostname:%s->%s:%s/tcp' % (url.hostname, doc['target_ip'], port)
    v['tags'] = [tag]

    # Create host
    host = dict(models.host_model)
    host['os'] = list() # no OS
    host['ports'] = list()
    host['hostnames'] = list()

    host['string_addr'] = doc['target_ip']
    host['long_addr'] = helper.ip2long(doc['target_ip'])

    if url.hostname:
        host['hostnames'].append(url.hostname)

    # Create port and associate with host
    port_dict = dict(models.port_model)
    port_dict['port'] = port
    port_dict['protocol'] = models.PROTOCOL_TCP
    port_dict['service'] = url.scheme
    host['ports'].append(port_dict)

    # Don't set an OS
    os_dict = dict(models.os_model)
    os_dict['tool'] = TOOL
    host['os'].append(os_dict)

    project['vulnerabilities'] = [v]
    project['hosts'] = [host]

    return project

if __name__ == '__main__':

    usage = "usage: %prog <project_id> <file>"
    description = "%prog imports WPScan json files into Lair"

    parser = OptionParser(usage=usage, description=description,
                          version="%prog 0.0.1")

    (options, args) = parser.parse_args()

    if len(args) != 2:
        print parser.get_usage()
        exit(1)

    # Connect to the database
    db = api.db_connect()

    project = parse(args[0], args[1], db, options)

    api.save(project, db, TOOL)

    exit(0)
